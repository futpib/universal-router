{"version":3,"file":"universal-router-sync.js","sources":["src/sync.js"],"sourcesContent":["/**\n * Universal Router (https://www.kriasoft.com/universal-router/)\n *\n * Copyright (c) 2015-present Kriasoft.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\n\nimport UniversalRouter from './UniversalRouter'\n\nconst { matchRoute, isChildRoute } = UniversalRouter\n\nexport default class UniversalRouterSync extends UniversalRouter {\n  resolve(pathnameOrContext) {\n    const context = {\n      ...this.context,\n      ...(typeof pathnameOrContext === 'string'\n        ? { pathname: pathnameOrContext }\n        : pathnameOrContext),\n    }\n    const match = matchRoute(\n      this.root,\n      this.baseUrl,\n      context.pathname.substr(this.baseUrl.length),\n      [],\n      null,\n    )\n    const resolve = this.resolveRoute\n    let matches = null\n    let nextMatches = null\n    let currentContext = context\n\n    function next(resume, parent = matches.value.route, prevResult) {\n      const routeToSkip = prevResult === null && matches.value.route\n      matches = nextMatches || match.next(routeToSkip)\n      nextMatches = null\n\n      if (!resume) {\n        if (matches.done || !isChildRoute(parent, matches.value.route)) {\n          nextMatches = matches\n          return null\n        }\n      }\n\n      if (matches.done) {\n        const error = new Error('Route not found')\n        error.status = 404\n        throw error\n      }\n\n      currentContext = { ...context, ...matches.value }\n\n      const result = resolve(currentContext, matches.value.params)\n      if (result !== null && result !== undefined) {\n        return result\n      }\n      return next(resume, parent, result)\n    }\n\n    context.next = next\n\n    try {\n      return next(true, this.root)\n    } catch (error) {\n      if (this.errorHandler) {\n        return this.errorHandler(error, currentContext)\n      }\n      throw error\n    }\n  }\n}\n"],"names":["matchRoute","UniversalRouter","isChildRoute","UniversalRouterSync","resolve","pathnameOrContext","context","pathname","match","root","baseUrl","substr","length","resolveRoute","matches","nextMatches","currentContext","next","resume","parent","prevResult","value","route","routeToSkip","done","error","Error","status","result","params","undefined","errorHandler"],"mappings":";;;;;;;;;;;;;;MAWQA,aAA6BC,gBAA7BD;MAAYE,eAAiBD,gBAAjBC;;MAECC;;;;;;;;;WACnBC,UAAA,iBAAQC,iBAAR,EAA2B;EACzB,QAAMC,OAAO,qBACR,KAAKA,OADG,EAEP,OAAOD,iBAAP,KAA6B,QAA7B,GACA;EAAEE,MAAAA,QAAQ,EAAEF;EAAZ,KADA,GAEAA,iBAJO,CAAb;EAMA,QAAMG,KAAK,GAAGR,UAAU,CACtB,KAAKS,IADiB,EAEtB,KAAKC,OAFiB,EAGtBJ,OAAO,CAACC,QAAR,CAAiBI,MAAjB,CAAwB,KAAKD,OAAL,CAAaE,MAArC,CAHsB,EAItB,EAJsB,EAKtB,IALsB,CAAxB;EAOA,QAAMR,OAAO,GAAG,KAAKS,YAArB;EACA,QAAIC,OAAO,GAAG,IAAd;EACA,QAAIC,WAAW,GAAG,IAAlB;EACA,QAAIC,cAAc,GAAGV,OAArB;;EAEA,aAASW,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAAoDC,UAApD,EAAgE;EAAA,UAA1CD,MAA0C;EAA1CA,QAAAA,MAA0C,GAAjCL,OAAO,CAACO,KAAR,CAAcC,KAAmB;EAAA;;EAC9D,UAAMC,WAAW,GAAGH,UAAU,KAAK,IAAf,IAAuBN,OAAO,CAACO,KAAR,CAAcC,KAAzD;EACAR,MAAAA,OAAO,GAAGC,WAAW,IAAIP,KAAK,CAACS,IAAN,CAAWM,WAAX,CAAzB;EACAR,MAAAA,WAAW,GAAG,IAAd;;EAEA,UAAI,CAACG,MAAL,EAAa;EACX,YAAIJ,OAAO,CAACU,IAAR,IAAgB,CAACtB,YAAY,CAACiB,MAAD,EAASL,OAAO,CAACO,KAAR,CAAcC,KAAvB,CAAjC,EAAgE;EAC9DP,UAAAA,WAAW,GAAGD,OAAd;EACA,iBAAO,IAAP;EACD;EACF;;EAED,UAAIA,OAAO,CAACU,IAAZ,EAAkB;EAChB,YAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,iBAAV,CAAd;EACAD,QAAAA,KAAK,CAACE,MAAN,GAAe,GAAf;EACA,cAAMF,KAAN;EACD;;EAEDT,MAAAA,cAAc,qBAAQV,OAAR,EAAoBQ,OAAO,CAACO,KAA5B,CAAd;EAEA,UAAMO,MAAM,GAAGxB,OAAO,CAACY,cAAD,EAAiBF,OAAO,CAACO,KAAR,CAAcQ,MAA/B,CAAtB;;EACA,UAAID,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKE,SAAlC,EAA6C;EAC3C,eAAOF,MAAP;EACD;;EACD,aAAOX,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBS,MAAjB,CAAX;EACD;;EAEDtB,IAAAA,OAAO,CAACW,IAAR,GAAeA,IAAf;;EAEA,QAAI;EACF,aAAOA,IAAI,CAAC,IAAD,EAAO,KAAKR,IAAZ,CAAX;EACD,KAFD,CAEE,OAAOgB,KAAP,EAAc;EACd,UAAI,KAAKM,YAAT,EAAuB;EACrB,eAAO,KAAKA,YAAL,CAAkBN,KAAlB,EAAyBT,cAAzB,CAAP;EACD;;EACD,YAAMS,KAAN;EACD;EACF;;;IAzD8CxB;;;;;;;;"}